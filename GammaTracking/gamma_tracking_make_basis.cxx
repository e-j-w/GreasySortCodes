#include "common.h" //define all global variables here!

//Function which generates basis waveforms from calibration data, using a map file generated by the GammaTrackingMakeMap code.
//Waveform basis data is stored in a ROOT tree.
//This assumes that the calibration data predominantly contains single hit events.
void make_waveform_basis(const char *infile, const char *mapfile, const char *calfile, const char *outfile, bool makeFineBasis) {

  TList * list = new TList;

  //read in histograms from map file
  TFile *inp = new TFile(mapfile,"read");
  if (!inp->IsOpen()) {
    cout << "ERROR: Could not open map file!" << endl;
    exit(-1);
  }else{
    cout << "Opened map file: " << mapfile << endl;
  }

  TH1 *rMap[NSEG], *angleMap[NSEG*MAX_VAL_R/BIN_WIDTH_R], *zMap[NSEG*(MAX_VAL_R/BIN_WIDTH_R)*(MAX_VAL_ANGLE/BIN_WIDTH_ANGLE)];
  for(int k = 0; k < NSEG; k++){
    sprintf(hname,"rMapSeg%i",k);
    if((rMap[k] = (TH1*)inp->Get(hname))==NULL){
      cout << "No r coordinate map for segment " << k << endl;
    }
    for(int j = 0; j < MAX_VAL_R/BIN_WIDTH_R; j++){
      sprintf(hname,"angleMapSeg%ir%ito%i",k,j*BIN_WIDTH_R,(j+1)*BIN_WIDTH_R);
      if((angleMap[k*MAX_VAL_R/BIN_WIDTH_R + j] = (TH1*)inp->Get(hname))==NULL){
        cout << "No angle coordinate map for segment " << k << ", radial bin " << j << endl;
      }
      for(int i = 0; i < MAX_VAL_ANGLE/BIN_WIDTH_ANGLE; i++){
        sprintf(hname,"zMapSeg%ir%ito%iangle%ito%i",k,j*BIN_WIDTH_R,(j+1)*BIN_WIDTH_R,i*BIN_WIDTH_ANGLE,(i+1)*BIN_WIDTH_ANGLE);
        if((zMap[k*(MAX_VAL_ANGLE/BIN_WIDTH_ANGLE)*(MAX_VAL_R/BIN_WIDTH_R) + j*MAX_VAL_ANGLE/BIN_WIDTH_ANGLE + i] = (TH1*)inp->Get(hname))==NULL){
          cout << "No z coordinate map for segment " << k << ", radial bin " << j << ", angle bin " << i << endl;
        }
      }
    } 
  }

  cout << "Map file data read in." << endl;

  
  //setup histograms for the basis
  Int_t basisBinsR, basisBinsAngle, basisBinsZ;
  if(makeFineBasis){
    basisBinsR = BASIS_BINS_R_COARSE*FINE_BASIS_BINFACTOR;
    basisBinsAngle = BASIS_BINS_ANGLE_COARSE*FINE_BASIS_BINFACTOR;
    basisBinsZ = BASIS_BINS_Z_COARSE*FINE_BASIS_BINFACTOR;
  }else{
    basisBinsR = BASIS_BINS_R_COARSE;
    basisBinsAngle = BASIS_BINS_ANGLE_COARSE;
    basisBinsZ = BASIS_BINS_Z_COARSE;
  }
  TH1I *basisHP = new TH1I("basis_hitpattern","basis_hitpattern",basisBinsR*basisBinsAngle*basisBinsZ,0,basisBinsR*basisBinsAngle*basisBinsZ);
  list->Add(basisHP);
  TH1D *basis[basisBinsR*basisBinsAngle*basisBinsZ];
  Int_t numEvtsBasis[basisBinsR*basisBinsAngle*basisBinsZ];
  memset(numEvtsBasis,0,sizeof(numEvtsBasis));
  for(int k = 0; k < basisBinsR; k++){
    for(int j = 0; j < basisBinsAngle; j++){
      for(int i = 0; i < basisBinsZ; i++){
        Int_t basisInd = k*basisBinsAngle*basisBinsZ + j*basisBinsZ + i;
        sprintf(hname,"basis_r%ito%i_angle%ito%i_z%ito%i",k*MAX_VAL_R/basisBinsR,(k+1)*MAX_VAL_R/basisBinsR,j*360/basisBinsAngle,(j+1)*360/basisBinsAngle,i*MAX_VAL_Z/basisBinsZ,(i+1)*MAX_VAL_Z/basisBinsZ);
        basis[basisInd] = new TH1D(hname,Form("basis_r%ito%i_angle%ito%i_z%ito%i",k*MAX_VAL_R/basisBinsR,(k+1)*MAX_VAL_R/basisBinsR,j*360/basisBinsAngle,(j+1)*360/basisBinsAngle,i*MAX_VAL_Z/basisBinsZ,(i+1)*MAX_VAL_Z/basisBinsZ),SAMPLES*(NSEG+1),0,SAMPLES*(NSEG+1));
        //list->Add(basis[basisInd]);
      }
    }
  }


  TFile * inputfile = new TFile(infile, "READ");
  if (!inputfile->IsOpen()) {
    cout << "ERROR: Could not open analysis tree file!" << endl;
    exit(-1);
  }
  TChain * AnalysisTree = (TChain * ) inputfile->Get("AnalysisTree");
  cout << AnalysisTree->GetNtrees() << " tree files, details:" << endl;
  AnalysisTree->ls();
  TTree * tree = (TTree * ) AnalysisTree->GetTree();
  cout << "Reading calibration file: " << calfile << endl;
  TChannel::ReadCalFile(calfile);
  Int_t nentries = AnalysisTree->GetEntries();

  TTigress * tigress = 0;
  TTigressHit * tigress_hit;
  if (AnalysisTree->FindBranch("TTigress")) {
    AnalysisTree->SetBranchAddress("TTigress", & tigress);
  } else {
    cout << "ERROR: no TTigress branch found!" << endl;
    exit(-1);
  }

  Int_t hit_counter = 0;
  Int_t map_hit_counter = 0;

  const std::vector<Short_t> *wf, *segwf;
  for (int jentry = 0; jentry < tree->GetEntries(); jentry++) {
    tree->GetEntry(jentry);
    for (int hitInd = 0; hitInd < tigress->GetMultiplicity(); hitInd++) {
      tigress_hit = tigress->GetTigressHit(hitInd);
      if(tigress_hit->GetKValue() != 700) continue;
      Double_t coreCharge = tigress_hit->GetCharge();
      if((coreCharge <= 0)||(coreCharge > BASIS_MAX_ENERGY)) continue; //bad energy
      tigress_hit->SetWavefit();
      wf = tigress_hit->GetWaveform();
      if(wf->size()!=SAMPLES){
        cout << "Entry " << jentry << ", improper core waveform size (" << wf->size() << ")." << endl;
        continue;
      }
      TPulseAnalyzer pulse;
      pulse.SetData(*wf,0);  // Allows you to use the full TPulseAnalyzer class
      Int_t waveform_t0 = (Int_t)pulse.fit_newT0(); //in samples
      if((waveform_t0 <= 0)||(waveform_t0 >= SAMPLES-WAVEFORM_SAMPLING_WINDOW -1)){
        //this entry has an unusable risetime
        continue;
      }
      hit_counter++;
      //cout << "Number of segments: " << tigress_hit->GetSegmentMultiplicity() << endl;
      if(tigress_hit->GetSegmentMultiplicity() == NSEG){
        //all segments have waveforms
        //check that the waveforms are the same size
        bool goodWaveforms = true;
        for(int i = 0; i < tigress_hit->GetSegmentMultiplicity(); i++){
          if(tigress_hit->GetSegmentHit(i).GetWaveform()->size()!=SAMPLES){
            cout << "Entry " << jentry << ", mismatched waveform sizes." << endl;
            goodWaveforms = false;
            break;
          }
          if((tigress_hit->GetSegmentHit(i).GetCharge() > BASIS_MAX_ENERGY)||(tigress_hit->GetSegmentHit(i).GetCharge() > MAX_ENERGY_SINGLE_INTERACTION)){
            goodWaveforms = false;
            break;
          }
        }
        if(goodWaveforms){
          //cout << "Entry " << jentry << endl;
          bool isHit = false;

          for(int i = 0; i < tigress_hit->GetSegmentMultiplicity(); i++){

            //calculate all ordering parameters (see ordering_parameter_calc.cxx)
            double rho = calc_ordering(tigress_hit,i,jentry,waveform_t0,0);
            if(rho == BAD_RETURN){
              continue;
            }
            double phi = calc_ordering(tigress_hit,i,jentry,waveform_t0,1);
            if(phi == BAD_RETURN){
              continue;
            }
            double zeta = calc_ordering(tigress_hit,i,jentry,waveform_t0,2);
            if(zeta == BAD_RETURN){
              continue;
            }
   
            Int_t segNum = tigress_hit->GetSegmentHit(i).GetSegment()-1; //1-indexed from GRSIsort, convert to 0-indexed

            isHit = true;

            //map to spatial parameters
            if(rMap[segNum]!=NULL){
              double r = rMap[segNum]->GetBinContent(rMap[segNum]->FindBin(rho));
              Int_t rInd = (Int_t)(r/BIN_WIDTH_R);
              if(rInd < MAX_VAL_R/BIN_WIDTH_R){
                if(angleMap[segNum*MAX_VAL_R/BIN_WIDTH_R + rInd]!=NULL){
                  double angle = angleMap[segNum*MAX_VAL_R/BIN_WIDTH_R + rInd]->GetBinContent(angleMap[segNum*MAX_VAL_R/BIN_WIDTH_R + rInd]->FindBin(phi));
                  Int_t angleInd = (Int_t)(angle/BIN_WIDTH_ANGLE);
                  if(zMap[segNum*(MAX_VAL_ANGLE/BIN_WIDTH_ANGLE)*(MAX_VAL_R/BIN_WIDTH_R) + rInd*MAX_VAL_ANGLE/BIN_WIDTH_ANGLE + angleInd]!=NULL){
                    double z = zMap[segNum*(MAX_VAL_ANGLE/BIN_WIDTH_ANGLE)*(MAX_VAL_R/BIN_WIDTH_R) + rInd*MAX_VAL_ANGLE/BIN_WIDTH_ANGLE + angleInd]->GetBinContent(zMap[segNum*(MAX_VAL_ANGLE/BIN_WIDTH_ANGLE)*(MAX_VAL_R/BIN_WIDTH_R) + rInd*MAX_VAL_ANGLE/BIN_WIDTH_ANGLE + angleInd]->FindBin(zeta));
                    
                    if((r>0.)&&(z>0.)&&(angle>0.)){
                      if(segNum<=3){
                        //r corresponds to the distance from the central contact at z=30
                        r = sqrt(r*r - (30.-z)*(30.-z));
                      }
                      if((r==r)&&(angle==angle)&&(z==z)){
                        angle += 90.*(segNum%4); //transform angle to 2pi spanned val

                        //cout << "r: " << r << ", angle: " << angle << ", z: " << z << endl;

                        //get indices for r, angle, z
                        Int_t rBasisInd = (Int_t)(r*basisBinsR/MAX_VAL_R);
                        Int_t angleBasisInd = (Int_t)(angle*basisBinsAngle/360.);
                        Int_t zBasisInd = (Int_t)(z*basisBinsZ/MAX_VAL_Z);
                        Int_t basisInd = rBasisInd*basisBinsAngle*basisBinsZ + angleBasisInd*basisBinsZ + zBasisInd;

                        //save waveforms (in 'superpulse' format, core waveform followed by segment waveforms on the same histogram)

                        //first core waveform
                        Double_t core_waveform_baseline = 0.;
                        for(int k = 0; k < BASELINE_SAMPLES; k++){
                          core_waveform_baseline += wf->at(k);
                        }
                        core_waveform_baseline /= 1.0*BASELINE_SAMPLES;
                        for(int k = 0; k < SAMPLES; k++){
                          basis[basisInd]->SetBinContent(k+1,basis[basisInd]->GetBinContent(k+1) + ((wf->at(k) - core_waveform_baseline)/coreCharge));
                        }
                        //then segment waveforms
                        for(int j = 0; j < tigress_hit->GetSegmentMultiplicity(); j++){
                          //cout << "basisInd: " << basisInd << endl;

                          Int_t segBasisInd = tigress_hit->GetSegmentHit(j).GetSegment();
                          segwf = tigress_hit->GetSegmentHit(j).GetWaveform();
                          Double_t seg_waveform_baseline = 0.;
                          for(int k = 0; k < BASELINE_SAMPLES; k++){
                            seg_waveform_baseline += segwf->at(k);
                          }
                          seg_waveform_baseline /= 1.0*BASELINE_SAMPLES;

                          //cout << "core t0: " << waveform_t0 << ", core energy: " << coreCharge << ", segment " << segBasisInd << " baseline: " << seg_waveform_baseline << endl;
                          
                          for(int k = 0; k < SAMPLES; k++){
                            //cout << "incrementing bin " << k << "by " << ((segwf->at(k) - seg_waveform_baseline)/coreCharge) << endl;
                            basis[basisInd]->SetBinContent(k+1+(SAMPLES*segBasisInd),basis[basisInd]->GetBinContent(k+1+(SAMPLES*segBasisInd)) + ((segwf->at(k) - seg_waveform_baseline)/coreCharge) );
                          }
                        }
                        numEvtsBasis[basisInd]++;
                      }
                      //cout << "val: " << basis[basisInd]->GetBinContent(0) << ", num evts: " << numEvtsBasis[basisInd] << endl;
                    }
                  }
                }
              }
            }
            
          }
          if(isHit){
            map_hit_counter++;
          }
        }
      }
      
    }
    if (jentry % 10000 == 0) cout << setiosflags(ios::fixed) << "Entry " << jentry << " of " << nentries << ", " << 100 * jentry / nentries << "% complete" << "\r" << flush;
  }

  for(int k = 0; k < basisBinsR; k++){
    for(int j = 0; j < basisBinsAngle; j++){
      for(int i = 0; i < basisBinsZ; i++){
        Int_t basisInd = k*basisBinsAngle*basisBinsZ + j*basisBinsZ + i;
        uint32_t basisHPVal = 0;
        uint32_t one = 1;
        if(numEvtsBasis[basisInd] > 0){
          for(int m = 0; m < SAMPLES*(NSEG+1); m++){
            basis[basisInd]->SetBinContent(m+1,basis[basisInd]->GetBinContent(m+1)/(1.0*numEvtsBasis[basisInd]));
          }
          for(int m = 0; m < NSEG; m++){
            //try and find the sample value near the expected maximum of the pulse (estimate it is at 0.85*SAMPLES)
            if(basis[basisInd]->GetBinContent((Int_t)((m+1.85)*(SAMPLES))) > 0.2){
              //this segment is 'hit' in this basis bin
              basisHPVal|=(one<<m);
              //cout << "hit seg " << m << " with bin content: " << basis[basisInd]->GetBinContent((Int_t)((m+1.85)*(SAMPLES))) << endl;
            }
          }
          //cout << "index: " << basisInd << ", HP val: " << basisHPVal << endl;
          //getc(stdin);
          basisHP->SetBinContent(basisInd+1,basisHPVal);
          list->Add(basis[basisInd]);
        }
      }
    }
  }

  cout << "Entry " << nentries << " of " << nentries << ", 100% Complete!" << endl;
  cout << map_hit_counter << " of " << hit_counter << " hits retained (" << 100*map_hit_counter/hit_counter << " %)." << endl;

  cout << "Writing histograms to: " << outfile << endl;
  TFile * myfile = new TFile(outfile, "RECREATE");
  myfile->cd();
  list->Write();
  cout << "Histograms written, sorting complete!" << endl;
  myfile->Close();
  inp->Close();
}

int main(int argc, char ** argv) {

  const char *afile, *mapfile, *outfileCoarse, *outfileFine, *calfile;

  if (argc < 2) {
    cout << endl << "This sortcode generates a waveform basis for gamma tracking, using the map file generated using the GammaTrackingMakeMap code." << endl << endl;
    cout << "Arguments: ./GammaTrackingMakeBasis analysis_tree_file map_file cal_file coarse_basis_output_file fine_basis_output_file" << endl << endl;
    cout << "The analysis tree (containing the calibration data used to make the basis) is a required argument.  Omitting other arguments will cause the sortcode to fall back to default values." << endl << endl;
	  return 0;
  } else if (argc == 2) {
	  afile = argv[1];
    mapfile = "trackingMap.root";
	  calfile = "CalibrationFile.cal";
	  outfileCoarse = "trackingWaveformBasisCoarse.root";
    outfileFine = "trackingWaveformBasisFine.root";
  } else if (argc == 3) {
	  afile = argv[1];
    mapfile = argv[2];
	  calfile = "CalibrationFile.cal";
	  outfileCoarse = "trackingWaveformBasisCoarse.root";
    outfileFine = "trackingWaveformBasisFine.root";
  } else if (argc == 4) {
	  afile = argv[1];
    mapfile = argv[2];
	  calfile = argv[3];
	  outfileCoarse = "trackingWaveformBasisCoarse.root";
    outfileFine = "trackingWaveformBasisFine.root";
  } else if (argc == 5) {
	  afile = argv[1];
    mapfile = argv[2];
	  calfile = argv[3];
	  outfileCoarse = argv[4];
    outfileFine = "trackingWaveformBasisFine.root";
  } else if (argc == 6) {
	  afile = argv[1];
    mapfile = argv[2];
	  calfile = argv[3];
	  outfileCoarse = argv[4];
    outfileFine = argv[5];
  } else if (argc > 6) {
	  cout << "Too many arguments." << endl;
    cout << "Arguments: ./GammaTrackingMakeBasis analysis_tree_file map_file cal_file coarse_basis_output_file fine_basis_output_file" << endl;
	  return 0;
  }

  cout << "Starting sortcode..." << endl;

  std::string grsi_path = getenv("GRSISYS"); // Finds the GRSISYS path to be used by other parts of the grsisort code
  if(grsi_path.length() > 0) {
	  grsi_path += "/";
  }
  // Read in grsirc in the GRSISYS directory to set user defined options on grsisort startup
  grsi_path += ".grsirc";
  gEnv->ReadFile(grsi_path.c_str(), kEnvChange);

  cout << "Input file: " << afile << endl << "Map data file: " << mapfile << endl << "Calibration file: " << calfile << endl; 
  cout << "Output file (coarse basis): " << outfileCoarse << endl << "Output file (fine basis): " << outfileFine << endl;

  TParserLibrary::Get()->Load();

  //make the coarse and fine waveform bases
  make_waveform_basis(afile, mapfile, calfile, outfileCoarse, false);
  make_waveform_basis(afile, mapfile, calfile, outfileFine, true);

  return 0;
}
