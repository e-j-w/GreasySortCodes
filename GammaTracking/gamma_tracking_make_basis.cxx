#include "common.h" //define all global variables here!

//Function which generates basis waveforms from calibration data, using a map file generated by the GammaTrackingMakeMap code.
//Waveform basis data is stored in a ROOT tree.
//This assumes that the calibration data predominantly contains single hit events.
void make_waveform_basis(const char *infile, const char *mapfile, const char *calfile, const char *outfile) {

  TList * list = new TList;

  //read in histograms from map file
  TFile *inp = new TFile(mapfile,"read");
  if (!inp->IsOpen()) {
    cout << "ERROR: Could not open map file!" << endl;
    exit(-1);
  }else{
    cout << "Opened map file: " << mapfile << endl;
  }

  
  char hname[64];
  TH1 *rMap[NSEG], *angleMap[NSEG*MAX_VAL_R/BIN_WIDTH_R], *zMap[NSEG*(MAX_VAL_R/BIN_WIDTH_R)*(MAX_VAL_ANGLE/BIN_WIDTH_ANGLE)];
  for(int k = 0; k < NSEG; k++){
    sprintf(hname,"rMapSeg%i",k);
    if((rMap[k] = (TH1*)inp->Get(hname))==NULL){
      cout << "No r coordinate map for segment " << k << endl;
    }
    for(int j = 0; j < MAX_VAL_R/BIN_WIDTH_R; j++){
      sprintf(hname,"angleMapSeg%ir%ito%i",k,j*BIN_WIDTH_R,(j+1)*BIN_WIDTH_R);
      if((angleMap[k*MAX_VAL_R/BIN_WIDTH_R + j] = (TH1*)inp->Get(hname))==NULL){
        cout << "No angle coordinate map for segment " << k << ", radial bin " << j << endl;
      }
      for(int i = 0; i < MAX_VAL_ANGLE/BIN_WIDTH_ANGLE; i++){
        sprintf(hname,"zMapSeg%ir%ito%iangle%ito%i",k,j*BIN_WIDTH_R,(j+1)*BIN_WIDTH_R,i*BIN_WIDTH_ANGLE,(i+1)*BIN_WIDTH_ANGLE);
        if((zMap[k*(MAX_VAL_ANGLE/BIN_WIDTH_ANGLE)*(MAX_VAL_R/BIN_WIDTH_R) + j*MAX_VAL_ANGLE/BIN_WIDTH_ANGLE + i] = (TH1*)inp->Get(hname))==NULL){
          cout << "No z coordinate map for segment " << k << ", radial bin " << j << ", angle bin " << i << endl;
        }
      }
    } 
  }

  cout << "Map file data read in." << endl;

  
  //setup histograms for the basis 
  Int_t samples = 100; //number of samples per waveform
  TH1D *basis[NSEG*BASIS_BINS_R*BASIS_BINS_ANGLE*BASIS_BINS_Z];
  Int_t numEvtsBasis[NSEG*BASIS_BINS_R*BASIS_BINS_ANGLE*BASIS_BINS_Z];
  memset(numEvtsBasis,0,sizeof(numEvtsBasis));
  for(int l = 0; l < NSEG; l++){
    for(int k = 0; k < BASIS_BINS_R; k++){
      for(int j = 0; j < BASIS_BINS_ANGLE; j++){
        for(int i = 0; i < BASIS_BINS_Z; i++){
          Int_t basisInd = l*BASIS_BINS_R*BASIS_BINS_ANGLE*BASIS_BINS_Z + k*BASIS_BINS_ANGLE*BASIS_BINS_Z + j*BASIS_BINS_Z + i;
          sprintf(hname,"basisSeg%ir%ito%iangle%ito%iz%ito%i",l,k*MAX_VAL_R/BASIS_BINS_R,(k+1)*MAX_VAL_R/BASIS_BINS_R,j*360/BASIS_BINS_ANGLE,(j+1)*360/BASIS_BINS_ANGLE,i*MAX_VAL_Z/BASIS_BINS_Z,(i+1)*MAX_VAL_Z/BASIS_BINS_Z);
          basis[basisInd] = new TH1D(hname,Form("basisSeg%ir%ito%iangle%ito%iz%ito%i",l,k*MAX_VAL_R/BASIS_BINS_R,(k+1)*MAX_VAL_R/BASIS_BINS_R,j*360/BASIS_BINS_ANGLE,(j+1)*360/BASIS_BINS_ANGLE,i*MAX_VAL_Z/BASIS_BINS_Z,(i+1)*MAX_VAL_Z/BASIS_BINS_Z),samples,0,samples);
          //list->Add(basis[basisInd]);
        }
      }
    }
  }


  TFile * inputfile = new TFile(infile, "READ");
  if (!inputfile->IsOpen()) {
    cout << "ERROR: Could not open analysis tree file!" << endl;
    exit(-1);
  }
  TChain * AnalysisTree = (TChain * ) inputfile->Get("AnalysisTree");
  cout << AnalysisTree->GetNtrees() << " tree files, details:" << endl;
  AnalysisTree->ls();
  TTree * tree = (TTree * ) AnalysisTree->GetTree();
  cout << "Reading calibration file: " << calfile << endl;
  TChannel::ReadCalFile(calfile);
  Int_t nentries = AnalysisTree->GetEntries();

  TTigress * tigress = 0;
  TTigressHit * tigress_hit;
  if (AnalysisTree->FindBranch("TTigress")) {
    AnalysisTree->SetBranchAddress("TTigress", & tigress);
  } else {
    cout << "ERROR: no TTigress branch found!" << endl;
    exit(-1);
  }

  Int_t hit_counter = 0;
  Int_t map_hit_counter = 0;

  const std::vector<Short_t> *wf, *segwf;
  bool found1, found2;
  Int_t waveform_t0;
  Int_t one;
  for (int jentry = 0; jentry < tree->GetEntries(); jentry++) {
    tree->GetEntry(jentry);
    for (one = 0; one < tigress->GetMultiplicity(); one++) {
      tigress_hit = tigress->GetTigressHit(one);
      if(tigress_hit->GetKValue() != 700) continue;
      tigress_hit->SetWavefit();
      wf = tigress_hit->GetWaveform();
      samples = wf->size();
      TPulseAnalyzer pulse;
      pulse.SetData(*wf,0);  // Allows you to use the full TPulseAnalyzer class
      waveform_t0 = (Int_t)pulse.fit_newT0(); //in samples
      if((waveform_t0 <= 0)||(waveform_t0 >= samples-WAVEFORM_SAMPLING_WINDOW -1)){
        //this entry has an unusable risetime
        continue;
      }
      hit_counter++;
      bool goodWaveforms = true;
      bool isHit = false;
      //cout << "Number of segments: " << tigress_hit->GetSegmentMultiplicity() << endl;
      if(tigress_hit->GetSegmentMultiplicity() == 8){
        //all segments have waveforms
        //check that the waveforms are the same size
        for(int i = 0; i < tigress_hit->GetSegmentMultiplicity(); i++){
          if(tigress_hit->GetSegmentHit(i).GetWaveform()->size()!=samples){
            cout << "Entry " << jentry << ", mismatched waveform sizes." << endl;
            goodWaveforms = false;
            break;
          }
        }
        if(goodWaveforms){
          //cout << "Entry " << jentry << endl;
          for(int i = 0; i < tigress_hit->GetSegmentMultiplicity(); i++){

            Int_t segNum = tigress_hit->GetSegmentHit(i).GetSegment()-1; //1-indexed from GRSIsort, convert to 0-indexed
            if((segNum<0)||(segNum >= NSEG)){
              cout << "Entry " << jentry << ", bad number of segments." << endl;
              continue;
            }

            //calculate all ordering parameters (see ordering_parameter_calc.cxx)
            double rho = calc_ordering(tigress_hit,i,jentry,samples,waveform_t0,0);
            if(rho == BAD_RETURN){
              continue;
            }
            double phi = calc_ordering(tigress_hit,i,jentry,samples,waveform_t0,1);
            if(phi == BAD_RETURN){
              continue;
            }
            double zeta = calc_ordering(tigress_hit,i,jentry,samples,waveform_t0,2);
            if(zeta == BAD_RETURN){
              continue;
            }
   
            isHit = true;

            //map to spatial parameters
            double r=-1.;
            double angle=-1.;
            double z=-1.;

            if(rMap[segNum]!=NULL){
              r = rMap[segNum]->GetBinContent(rMap[segNum]->FindBin(rho));
            }
            Int_t rInd = (Int_t)(r/BIN_WIDTH_R);
            if(rInd < MAX_VAL_R/BIN_WIDTH_R){
              if(angleMap[segNum*MAX_VAL_R/BIN_WIDTH_R + rInd]!=NULL){
                angle = angleMap[segNum*MAX_VAL_R/BIN_WIDTH_R + rInd]->GetBinContent(angleMap[segNum*MAX_VAL_R/BIN_WIDTH_R + rInd]->FindBin(phi));
                Int_t angleInd = (Int_t)(angle/BIN_WIDTH_ANGLE);
                if(zMap[segNum*(MAX_VAL_ANGLE/BIN_WIDTH_ANGLE)*(MAX_VAL_R/BIN_WIDTH_R) + rInd*MAX_VAL_ANGLE/BIN_WIDTH_ANGLE + angleInd]!=NULL){
                  z = zMap[segNum*(MAX_VAL_ANGLE/BIN_WIDTH_ANGLE)*(MAX_VAL_R/BIN_WIDTH_R) + rInd*MAX_VAL_ANGLE/BIN_WIDTH_ANGLE + angleInd]->GetBinContent(zMap[segNum*(MAX_VAL_ANGLE/BIN_WIDTH_ANGLE)*(MAX_VAL_R/BIN_WIDTH_R) + rInd*MAX_VAL_ANGLE/BIN_WIDTH_ANGLE + angleInd]->FindBin(zeta));
                  if((r>=0.)&&(z>=0.)&&(angle>=0.)){

                    angle += 90.*(segNum%4); //transform angle to 2pi spanned val

                    //cout << "r: " << r << ", angle: " << angle << ", z: " << z << endl;

                    //get indices for r, angle, z
                    Int_t rBasisInd = (Int_t)(r*BASIS_BINS_R/MAX_VAL_R);
                    Int_t angleBasisInd = (Int_t)(angle*BASIS_BINS_ANGLE/360);
                    Int_t zBasisInd = (Int_t)(z*BASIS_BINS_Z/MAX_VAL_Z);

                    //save waveforms
                    for(int j = 0; j < tigress_hit->GetSegmentMultiplicity(); j++){
                      Int_t segBasisInd = tigress_hit->GetSegmentHit(j).GetSegment()-1;
                      Int_t basisInd = segBasisInd*BASIS_BINS_R*BASIS_BINS_ANGLE*BASIS_BINS_Z + rBasisInd*BASIS_BINS_ANGLE*BASIS_BINS_Z + angleBasisInd*BASIS_BINS_Z + zBasisInd;
                      //cout << "basisInd: " << basisInd << endl;

                      segwf = tigress_hit->GetSegmentHit(j).GetWaveform();
                      for(int k = 0; k < samples; k++){
                        basis[basisInd]->SetBinContent(k,basis[basisInd]->GetBinContent(k) + segwf->at(k));
                      }
                      numEvtsBasis[basisInd]++;

                    }
                    //const std::vector<Short_t> *segwf;
                    //segwf = tigress_hit->GetSegmentHit(i).GetWaveform();
                    

                    /*rMappedHist[segNum]->Fill(r);
                    angleMappedHist[segNum]->Fill(angle);
                    zMappedHist[segNum]->Fill(z);*/
                  }
                }
              }
            }
          }
          if(isHit){
            map_hit_counter++;
          }
        }
      }
      
    }
    if (jentry % 10000 == 0) cout << setiosflags(ios::fixed) << "Entry " << jentry << " of " << nentries << ", " << 100 * jentry / nentries << "% complete" << "\r" << flush;
  }

  for(int l = 0; l < NSEG; l++){
    for(int k = 0; k < BASIS_BINS_R; k++){
      for(int j = 0; j < BASIS_BINS_ANGLE; j++){
        for(int i = 0; i < BASIS_BINS_Z; i++){
          Int_t basisInd = l*BASIS_BINS_R*BASIS_BINS_ANGLE*BASIS_BINS_Z + k*BASIS_BINS_ANGLE*BASIS_BINS_Z + j*BASIS_BINS_Z + i;
          if(numEvtsBasis[basisInd] > 0){
            list->Add(basis[basisInd]);
          }
        }
      }
    }
  }

  cout << "Entry " << nentries << " of " << nentries << ", 100% Complete!" << endl;
  cout << map_hit_counter << " of " << hit_counter << " hits retained (" << 100*map_hit_counter/hit_counter << " %)." << endl;

  cout << "Writing histograms to: " << outfile << endl;
  TFile * myfile = new TFile(outfile, "RECREATE");
  myfile->cd();
  list->Write();
  cout << "Histograms written, sorting complete!" << endl;
  myfile->Close();
  inp->Close();
}

int main(int argc, char ** argv) {

  const char *afile, *mapfile, *outfile, *calfile;

  // Input-chain-file, output-histogram-file
  if (argc < 2) {
    cout << endl << "This sortcode a waveform basis for gamma tracking, using the map file generated using the GammaTrackingMakeMap code." << endl << endl;
    cout << "Arguments: ./GammaTrackingMakeBasis analysis_tree_file map_file cal_file output_file" << endl;
    cout << "The analysis tree (containing the calibration data used to make the basis) is a required argument.  Omitting other arguments will cause the sortcode to fall back to default values." << endl << endl;
	  return 0;
  } else if (argc == 2) {
	  afile = argv[1];
    mapfile = "trackingMap.root";
	  calfile = "CalibrationFile.cal";
	  outfile = "trackingWaveformBasis.root";
  } else if (argc == 3) {
	  afile = argv[1];
    mapfile = argv[2];
	  calfile = "CalibrationFile.cal";
	  outfile = "trackingWaveformBasis.root";
  } else if (argc == 4) {
	  afile = argv[1];
    mapfile = argv[2];
	  calfile = argv[3];
	  outfile = "trackingWaveformBasis.root";
  } else if (argc == 5) {
	  afile = argv[1];
    mapfile = argv[2];
	  calfile = argv[3];
	  outfile = argv[4];
  } else if (argc > 5) {
	  cout << "Too many arguments." << endl;
    cout << "Arguments: ./GammaTrackingSortExample analysis_tree_file map_file cal_file output_file" << endl;
	  return 0;
  }

  cout << "Starting sortcode..." << endl;

  std::string grsi_path = getenv("GRSISYS"); // Finds the GRSISYS path to be used by other parts of the grsisort code
  if(grsi_path.length() > 0) {
	  grsi_path += "/";
  }
  // Read in grsirc in the GRSISYS directory to set user defined options on grsisort startup
  grsi_path += ".grsirc";
  gEnv->ReadFile(grsi_path.c_str(), kEnvChange);

  cout << "Input file: " << afile << endl << "Simulation data file: " << mapfile << endl << "Calibration file: " << calfile << endl << "Output file: " << outfile << endl;

  TParserLibrary::Get()->Load();

  make_waveform_basis(afile, mapfile, calfile, outfile);

  return 0;
}
